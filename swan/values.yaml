cvmfs:
  repositories: &cvmfsRepos
    - mount: sft.cern.ch
    - mount: sft-nightlies.cern.ch
    - mount: cvmfs-config.cern.ch
jupyterhub:
  singleuser:
    uid: 0
    fsGid: 0
    storage:
      type: none
    image:
      name: "gitlab-registry.cern.ch/swan/docker-images/systemuser"
      tag: "v5.9.0"
      pullPolicy: "Always"
    cloudMetadata:
      enabled: true
    networkPolicy:
      enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: traefik
      traefik.ingress.kubernetes.io/frontend-entry-points: http, https
      traefik.ingress.kubernetes.io/redirect-entry-point: https
    # tls-cert is commented out, using lets encrypt certificates
    #tls:
    #  - secretName: swan-tls-cert
    # placeholder for hostname
    hosts:
  proxy:
    service:
      type: ClusterIP
    chp:
      image:
        name: "jupyterhub/configurable-http-proxy"
        tag: "4.2.0"
        pullPolicy: "IfNotPresent"
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
    # placeholder for hub secret token
    secretToken:
  hub:
    fsGid: 0
    containerSecurityContext:
      runAsUser: 0
      runAsGroup: 0
    deploymentStrategy:
      type: RollingUpdate
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    image:
      name: "gitlab-registry.cern.ch/swan/docker-images/jupyterhub"
      tag: "v1.13"
      pullPolicy: "Always"
    extraVolumeMounts:
      - name: swan-jh
        mountPath: /srv/jupyterhub/options_form_config.json
        subPath: options_form_config.json
      - name: swan-jh
        mountPath: /srv/jupyterhub/jupyterhub_form.html
        subPath: jupyterhub_form.html
      - name: swan-jh
        mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/1_swan_config.py
        subPath: swan_config.py
      - name: swan-jh
        configMap:
          name: swan-scripts
          items:
          - key: options_form_config.json
            path: options_form_config.json
          - key: jupyterhub_form.html
            path: jupyterhub_form.html
          - key: swan_config.py
            path: swan_config.py
    config:
      KeyCloakAuthenticator:
        # Config missing
        oidc_issuer:
        admin_role: swan-admins
        scope:
          - profile
          - email
          - offline_access
        exchange_tokens: []
        logout_redirect_uri: https://cern.ch/swan
        auto_login: True
        username_key: preferred_username
        client_id: # placeholder, check secrets
        client_secret: # placeholder, check secrets
        oauth_callback_url: # placeholder, check secrets
      SwanSpawner:
        options_form_config: /srv/jupyterhub/options_form_config.json
        # Give notebook 45s to start a webserver and max 60s for whole spawn process
        http_timeout: 45
        start_timeout: 60
        consecutive_failure_limit: 0
      SwanKubeSpawner:
        # set home directory to EOS
        local_home: False
      SpawnHandlersConfigs:
        # disable some defaults of swanspawner that do now work for kube-spawner
        # FIXME remove this from the spawner once we support only k8s
        metrics_on: False
        local_home: True
      JupyterHub:
        authenticator_class: keycloakauthenticator.KeyCloakAuthenticator
        spawner_class: swanspawner.SwanKubeSpawner
        cleanup_servers: False
        tornado_settings:
          # currently we customize spawnhandler to stay in form before redirecting the user, as upstream does
          # FIXME remove once we remove the the metrics from the spawn
          slow_spawn_timeout: 15
        allow_named_servers: False
    extraConfig:
      00-authConf: |
        def pre_spawn_hook(authenticator, spawner, auth_state):
          raise Exception("Please configure pre_spawn_hook")
        c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
      # TODO delete this once we upgrade to newer upstream (which loads files from this path automatically)
      01-swanConf: |
        exec(open('/usr/local/etc/jupyterhub/jupyterhub_config.d/1_swan_config.py').read())
    extraEnv:
      # placeholder for hub auth state cryptographic key
      JUPYTERHUB_CRYPT_KEY:
    networkPolicy:
      enabled: false
    # placeholder for hub cookieSecret
    # when empty, it generates a new randomly
    cookieSecret:
  rbac:
    enabled: true
  scheduling:
    userScheduler:
      enabled: false
    podPriority:
      enabled: false
  prePuller:
    hook:
      enabled: true
    continuous:
      enabled: false
    containerSecurityContext:
      allowPrivilegeEscalation: true
  debug:
    enabled: true
  # disable upstream cull, but enable custom one
  cull:
    enabled: false
  custom:
    cull:
      enabled: true
      every: 600
      # 2 hours
      timeout: 7200
      users: true
      checkEosAuth: false
    cvmfs:
      # FIXME
      storageProvisioner: csi-cvmfsplugin
      repositories: *cvmfsRepos
      prefetcher:
        enabled: false
        image:
          name: "gitlab-registry.cern.ch/swan/docker-images/cvmfs-prefetcher"
          tag: "v1.1"
# placeholders for swan credentials
swan:
  secrets:
    ingress:
      cert:
      key:

#
# Decide which client to use for accessing EOS
# - daemonSet deploys eosxd pods exposing `/eos` path on the host.
#     Other pods can access `/eos` bind-mounting from the host.
# - CSI driver configures a cluster-wide storage driver for EOS.
#     Access to EOS is provided by persistnt volume claims.
#
# By setting both to false, no eosxd client pods will be deployed
#   and access to EOS will not be possible.
#
# Warning: It is discouraged to enable both at the same time.
#
eosClient:
  daemonSet: true
  csiDriver: false

#
# Decide which client to use for accessing CVMFS
# - daemonSet deploys cvmfs pods exposing `/cvmfs` path on the host.
#     Other pods can access `/cvmfs` bind-mounting from the host.
# - CSI driver configures a cluster-wide storage driver for CVMFS.
#     Access to CVMFS is provided by persistnt volume claims.
#
# By setting both to false, no cvmfs client pods will be deployed
#   and access to CVMFS will not be possible.
#
# Warning: It is discouraged to enable both at the same time.
#
cvmfsClient:
  daemonSet: true
  csiDriver: false
