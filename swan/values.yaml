#
# CVMFS access
# - We deploy a cluster-wide storage driver for CVMFS, provided by the
#   Kubernetes team at CERN (https://gitlab.cern.ch/kubernetes/storage/cvmfs-csi).
#   This solution is based on automounting.
#
cvmfs-csi:
  enabled: true
  automountHostPath: /var/cvmfs-blue
  automountStorageClass:
    create: true

#
# EOS access
# - We deploy a cluster-wide storage driver for EOS, provided by the
#   Kubernetes team at CERN (https://gitlab.cern.ch/kubernetes/storage/eosxd-csi).
#   This solution is based on automounting.
#
eosxd-csi:
  enabled:  &eosEnabled true
  automountHostPath: /var/eos-blue
  commonStorageClass:
    enabled: true

#
# JupyterHub
#
jupyterhub:
  singleuser:
    uid: 0
    fsGid: 0
    storage:
      type: none
    image:
      name: "gitlab-registry.cern.ch/swan/docker-images/jupyter/swan"
      tag: "v0.0.14"
      pullPolicy: "Always"
    cloudMetadata:
      # until we configure networkPolicy
      blockWithIptables: true
      ip: 169.254.169.254
    networkPolicy:
      enabled: false
    extraAnnotations:
      kubectl.kubernetes.io/default-container: notebook
    extraEnv:
      SWAN_DISABLE_NOTIFICATIONS: "true"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 100m
    ingressClassName: nginx
    #tls:
    #  - secretName: swan-tls-cert
    # placeholder for hostname
    hosts:
  proxy:
    service:
      type: ClusterIP
    chp:
      image:
        name: "jupyterhub/configurable-http-proxy"
        tag: "4.5.0"
        pullPolicy: "IfNotPresent"
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
    # placeholder for hub secret token
    secretToken:
  hub:
    podSecurityContext:
      fsGroup: 0
    containerSecurityContext:
      runAsUser: 0
      runAsGroup: 0
    deploymentStrategy:
      type: RollingUpdate
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    livenessProbe:
      enabled: true
      initialDelaySeconds: 300
      periodSeconds: 15
      failureThreshold: 20
      timeoutSeconds: 10
    readinessProbe:
      enabled: false
    image:
      name: "gitlab-registry.cern.ch/swan/docker-images/jupyterhub"
      tag: v3.18
      pullPolicy: "Always"
    extraVolumeMounts:
      - name: swan-jh
        mountPath: /srv/jupyterhub/options_form_config.json
        subPath: options_form_config.json
      - name: swan-jh
        mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/1_swan_config.py
        subPath: swan_config.py
    extraVolumes:
      - name: swan-jh
        configMap:
          name: swan-scripts
          items:
          - key: options_form_config.json
            path: options_form_config.json
          - key: swan_config.py
            path: swan_config.py
    config:
      KeyCloakAuthenticator:
        # Config missing
        oidc_issuer:
        scope:
          - profile
          - email
          - offline_access
          - openid
        exchange_tokens: []
        auto_login: True
        allow_all: True
        client_id: # placeholder, check secrets
        client_secret: # placeholder, check secrets
        oauth_callback_url: # placeholder, check secrets
      SwanSpawner:
        options_form_config: /srv/jupyterhub/options_form_config.json
        # Give notebook 45s to start a webserver and max 60s for whole spawn process
        http_timeout: 45
        start_timeout: 60
        consecutive_failure_limit: 0
      KubeSpawner:
        delete_pvc: False
      SwanKubeSpawner:
        # set home directory to EOS
        local_home: False
        centos7_image: "gitlab-registry.cern.ch/swan/docker-images/systemuser:v6.0.0"
      SpawnHandlersConfigs:
        # disable some defaults of swanspawner that do now work for kube-spawner
        # FIXME remove this from the spawner once we support only k8s
        metrics_on: False
        local_home: True
      JupyterHub:
        authenticator_class: keycloakauthenticator.KeyCloakAuthenticator
        spawner_class: swanspawner.SwanKubeSpawner
        cleanup_servers: False
        tornado_settings:
          # currently we customize spawnhandler to stay in form before redirecting the user, as upstream does
          # FIXME remove once we remove the the metrics from the spawn
          slow_spawn_timeout: 15
        allow_named_servers: False
    extraConfig:
      00-authConf: |
        def pre_spawn_hook(authenticator, spawner, auth_state):
          raise Exception("Please configure pre_spawn_hook")
        c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
    networkPolicy:
      enabled: false
    # placeholder for hub cookieSecret
    # when empty, it generates a new randomly
    cookieSecret:
  scheduling:
    userScheduler:
      enabled: false
    podPriority:
      enabled: false
  prePuller:
    hook:
      enabled: true
    continuous:
      enabled: false
    containerSecurityContext:
      allowPrivilegeEscalation: true
  # disable upstream cull, but enable custom one
  cull:
    enabled: false
  custom:
    cull:
      enabled: true
      every: 600
      # 2 hours
      timeout: 7200
      users: true
      checkEosAuth: false
    eos:
      enabled: *eosEnabled
# placeholders for swan credentials
swan:
  secrets:
    ingress:
      cert:
      key:

