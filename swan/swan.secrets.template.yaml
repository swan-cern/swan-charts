swan:
  binderhub:
    image:
      name: registry.cern.ch/binder/binderhub
      tag: v1.0.0-alpha
    extraEnv:
      REQUESTS_CA_BUNDLE: /etc/pki/tls/certs/ca-bundle.crt
    config:
      Launcher:
        allow_named_servers: true
      BinderHub:
        debug: true
        base_url: /binder/
        auth_enabled: true
        use_registry: true
        image_prefix: registry.cern.ch/binder/exp1-
        hub_url: https://swanrc.cern.ch/
      DockerRegistry:
        token_url: "https://registry.cern.ch/v2/token?service=registry.cern.ch"
    service:
      type: NodePort
    registry:
      url: https://registry.cern.ch
      username: robot-binder+binder
      password: ......
    jupyterhub:
      singleuser:
        storage:
          type: none
        image:
          tag: v5.15.4
      # understand why this is needed and what is in swan/values.yaml is not enough
      hub:
        redirectToServer: false
        image:
          name: gitlab-registry.cern.ch/rcastell/publicregistry/jupyterhub
          tag: v2.0.alfa13
        # database backend to use for the hub database
        db:
          type: sqlite-memory
        services:
          binder:
            oauth_no_confirm: true
            oauth_redirect_uri: "http://<swan_hostname>swanrc.cern.ch/binder/oauth_callback"
            oauth_client_id: "service-binder-oauth-client-test"
        config:
          JupyterHub:
            allow_named_servers: true
            named_server_limit_per_user: 5
            admin_access: true
          SwanBinderSpawner:
            default_url: 'lab'
            auth_enabled: true
          KeyCloakAuthenticator:
            admin_users:
              - .....
            client_id: 
            client_secret: 
            oauth_callback_url: https://<swan_hostname>/hub/oauth_callback 
        extraConfig:
          03-swanbinder: |
            c.JupyterHub.spawner_class = swanspawner.SwanBinderSpawner
            c.SwanBinderSpawner.cmd = 'jupyterhub-singleuser'
  jupyterhub:
    proxy:
      # generate with openssl rand -hex 32
      # encrypt communications between the hub and the configurable-http-proxy
      secretToken:
    hub:
      # database backend to use for the hub database (when commented use sqlite-memory for dev purposes)
#      db:
#        url:
#        password:
      extraEnv:
        # openssl rand -hex 32
        # to encrypt auth state
        JUPYTERHUB_CRYPT_KEY:
      # openssl rand -hex 32
      # to sign cookies
      cookieSecret:
      config:
        KeyCloakAuthenticator:
          client_id:
          client_secret:
          # https://<swan_hostname>/hub/oauth_callback
          oauth_callback_url:
    ingress:
      # List of hosts to route requests to the proxy (use the main alias if dns load balanced)
      tls:
        - secretName: swan-tls-cert
          hosts:
            - <swan_hostname>
  secrets:
    # ssl termination certificate
    ingress:
    #this two keys are the output of "cat host{cert|key}.pem | base64 -w0"
      cert:
      key:
