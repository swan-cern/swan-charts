swan:
  cvmfs:
    deployDaemonSet: &cvmfsDeployDS true
    deployCsiDriver: &cvmfsDeployCSI false
    useCsiDriver: &cvmfsUseCSI false
    prefetcher:
      enabled: true
      jobs:
        # ROOT
        cron_opennotebook_root_kernel:
          command: >-
            source /cvmfs/sft.cern.ch/lcg/views/LCG_102b_swan/x86_64-centos7-gcc11-opt/setup.sh &&
            (timeout 20s python3 -m JupyROOT.kernel.rootkernel > /dev/null 2>&1 || true)
          minute: '*/15'
        # NXCALS
        cron_opennotebook_nxcals:
          command: >-
            source /cvmfs/sft.cern.ch/lcg/views/LCG_100_nxcals/x86_64-centos7-gcc9-opt/setup.sh &&
            (timeout 20s python3 -m ipykernel > /dev/null 2>&1 || true) &&
            (timeout 20s python3 -c 'import pyspark' || true)
          minute: '*/15'
        # CUDA
        cron_opennotebook_cuda:
          command: >-
            (lsmod | grep nvidia) &&
            source /cvmfs/sft.cern.ch/lcg/views/LCG_102b_cuda/x86_64-centos7-gcc8-opt/setup.sh &&
            (timeout 20s python3 -c 'import tensorflow' || true) &&
            (timeout 20s python3 -c 'import torch' || true)
          minute: '*/15'
    repositories:
      - cvmfs-config.cern.ch
      - sft.cern.ch
      - sft-nightlies.cern.ch
      - alice.cern.ch
      - alice-ocdb.cern.ch
      - alice-nightlies.cern.ch
      - alpha.cern.ch
      - ams.cern.ch
      - atlas.cern.ch
      - atlas-condb.cern.ch
      - atlas-nightlies.cern.ch
      - clicbp.cern.ch
      - cms.cern.ch
      - cms-ib.cern.ch
      - cms-bril.cern.ch
      - compass.cern.ch
      - compass-condb.cern.ch
      - fcc.cern.ch
      - ganga.cern.ch
      - geant4.cern.ch
      - lhcb.cern.ch
      - lhcb-condb.cern.ch
      - lhcbdev.cern.ch
      - na61.cern.ch
      - na62.cern.ch
      - projects.cern.ch
      - sw.hsf.org
      - sndlhc.cern.ch
  eos:
    deployDaemonSet: &eosDeployDS false
    deployCsiDriver: &eosDeployCSI true
    useCsiDriver: &eosUseCSI true
  eosxd:
    # we need to specify the mounts here otherwise cms/atlas won't be mounted properly
    mounts:
      ams: {}
      atlas: {}
      cms: {}
      experiment: {}
      hepdata: {}
      opendata: {}
      pps: {}
      project:
        project-i00: a e j g v k q y
        project-i01: l h b p s f w n o
        project-i02: d c i r m t u x z
      theory: {}
      user:
        home-i00: d l n t z
        home-i01: a g j k w
        home-i02: h o r s y
        home-i03: b e m v x
        home-i04: c f i p q u
      web: {}
      workspace: {}
  jupyterhub:
    singleuser:
      memory:
        guarantee: 4G
      cpu:
        guarantee: 1
      extraEnv:
        # Enable HTCondor service configuration for CERN in the user image
        CERN_HTCONDOR: "true"   
    hub:
      extraVolumeMounts:
        - name: swan-jh-cern
          mountPath: /srv/jupyterhub/options_form_config.json
          subPath: options_form_config.json
        - name: swan-jh
          mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/1_swan_config.py
          subPath: swan_config.py
        - name: swan-jh-cern
          mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/2_swan_config_cern.py
          subPath: swan_config_cern.py
        - name: swan-jh-cern
          mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/3_swan_spark_config.py
          subPath: swan_spark_config.py
        - name: swan-secrets
          mountPath: /srv/jupyterhub/private/eos.cred
          subPath: eos.cred
        - name: swan-secrets
          mountPath: /srv/jupyterhub/private/hadoop.cred
          subPath: hadoop.cred
        - name: swan-secrets
          mountPath: /srv/jupyterhub/private/sparkk8s.cred
          subPath: sparkk8s.cred
        - name: swan-cull-scripts
          mountPath: /srv/jupyterhub/culler/check_ticket.sh
          subPath: cull_check_ticket.sh
        - name: swan-cull-scripts
          mountPath: /srv/jupyterhub/culler/delete_ticket.sh
          subPath: cull_delete_ticket.sh
        - name: swan-tokens-scripts
          mountPath: /srv/jupyterhub/private/eos_token.sh
          subPath: eos_token.sh
        - name: swan-tokens-scripts
          mountPath: /srv/jupyterhub/private/webhdfs_token.sh
          subPath: webhdfs_token.sh
        - name: swan-tokens-scripts
          mountPath: /srv/jupyterhub/private/sparkk8s_token.sh
          subPath: sparkk8s_token.sh
        - name: cvmfs
          mountPath: /cvmfs
      extraVolumes:
        - name: cvmfs
          hostPath:
            path: /var/cvmfs
            type: Directory
        - name: swan-jh
          configMap:
            name: swan-scripts
            items:
            - key: swan_config.py
              path: swan_config.py
        - name: swan-jh-cern
          configMap:
            name: swan-scripts-cern
            items:
            - key: options_form_config.json
              path: options_form_config.json
            - key: swan_config_cern.py
              path: swan_config_cern.py
            - key: swan_spark_config.py
              path: swan_spark_config.py
        - name: swan-cull-scripts
          configMap:
            name: swan-scripts-cern
            items:
            - key: cull_check_ticket.sh
              path: cull_check_ticket.sh
            - key: cull_delete_ticket.sh
              path: cull_delete_ticket.sh
            defaultMode: 356 # 0544 perm
        - name: swan-tokens-scripts
          configMap:
            name: swan-scripts-env-prod
            items:
            - key: webhdfs_token.sh
              path: webhdfs_token.sh
            - key: eos_token.sh
              path: eos_token.sh
            - key: sparkk8s_token.sh
              path: sparkk8s_token.sh
            defaultMode: 356 # 0544 perm
        - name: swan-secrets
          secret:
            secretName: swan-cern
            items:
            - key: eos.cred
              path: eos.cred
            - key: hadoop.cred
              path: hadoop.cred
            - key: sparkk8s.cred
              path: sparkk8s.cred
      config:
        KeyCloakAuthenticator:
          oidc_issuer: https://auth.cern.ch/auth/realms/cern
          exchange_tokens:
            - eos-service
            - cernbox-service
          logout_redirect_url: https://cern.ch/swan
          auto_login: False
          username_key: preferred_username
          client_id: # placeholder, check secrets
          client_secret: # placeholder, check secrets
          oauth_callback_url: # placeholder, check secrets

          # skip refreshing tokens if already refreshed in last 15 minutes
          # this assumes tokens provided by keycloak are valid for 20 minutes
          auth_refresh_age: 900
        JupyterHub:
          allow_named_servers: False
      extraConfig:
        00-authConf: |
          def pre_spawn_hook(authenticator, spawner, auth_state):
            spawner.environment['ACCESS_TOKEN'] = auth_state['exchanged_tokens']['eos-service']
            spawner.environment['OAUTH_INSPECTION_ENDPOINT'] = authenticator.userdata_url.replace('https://', '')
            spawner.user_uid = str(str(auth_state['oauth_user']['cern_uid'])) # k8s only supports values as strings!
            decoded_token = authenticator._decode_token(auth_state['access_token'])
            spawner.user_roles = authenticator.claim_roles_key(authenticator, decoded_token)
          c.KeyCloakAuthenticator.pre_spawn_hook = pre_spawn_hook
        02-spawnError: |
          SPAWN_ERROR_MESSAGE = """SWAN could not start a session for your user, please try again. If the problem persists, please check:
          <ul>
              <li>Do you have a CERNBox account? If not, click <a href="https://cernbox.cern.ch" target="_blank">here</a>.</li>
              <li>Is there a problem with the service? Find information <a href="https://cern.service-now.com/service-portal?id=service_status_board" target="_blank">here</a>.</li>
              <li>If none of the options apply, please open a <a href="https://cern.service-now.com/service-portal?id=functional_element&name=swan" target="_blank">Support Ticket</a>.</li>
          </ul>"""

          # SWAN@CERN error message
          c.SpawnHandlersConfigs.spawn_error_message = SPAWN_ERROR_MESSAGE
      db:
        type: postgres
        # placeholder for postgres connection url
        url:
        # placeholder for postgres password
        password:
      services:
        hadoop-token-generator: {} # apiToken is generated by the chart
        prometheus-service-monitor: {} # apiToken is generated by the chart
          
    custom:
      cull:
        # 6 hours
        timeout: 21600
        checkEosAuth: true
        hooksDir: /srv/jupyterhub/culler
      cvmfs:
        deployDaemonSet: *cvmfsDeployDS
        deployCsiDriver: *cvmfsDeployCSI
        useCsiDriver: *cvmfsUseCSI
        repositories:
          - mount: cvmfs-config.cern.ch
          - mount: sft.cern.ch
            proxy: 'http://ca-proxy-sft.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: sft-nightlies.cern.ch
            proxy: 'http://ca-proxy-sft.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: alice.cern.ch
            proxy: 'http://ca-proxy-alice.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: alice-ocdb.cern.ch
            proxy: 'http://ca-proxy-alice.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: alice-nightlies.cern.ch
            proxy: 'http://ca-proxy-alice.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: alpha.cern.ch
          - mount: ams.cern.ch
          - mount: atlas.cern.ch
            proxy: 'http://ca-proxy-atlas.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: atlas-condb.cern.ch
            proxy: 'http://ca-proxy-atlas.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: atlas-nightlies.cern.ch
            proxy: 'http://ca-proxy-atlas.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: clicbp.cern.ch
          - mount: cms.cern.ch
            proxy: 'http://cmsmeyproxy.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: cms-ib.cern.ch
            proxy: 'http://cmsmeyproxy.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: cms-bril.cern.ch
            proxy: 'http://cmsmeyproxy.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: compass.cern.ch
            proxy: 'http://ca-proxy-compass.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: compass-condb.cern.ch
            proxy: 'http://ca-proxy-compass.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: fcc.cern.ch
          - mount: ganga.cern.ch
          - mount: geant4.cern.ch
          - mount: lhcb.cern.ch
            proxy: 'http://ca-proxy-lhcb.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: lhcb-condb.cern.ch
            proxy: 'http://ca-proxy-lhcb.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: lhcbdev.cern.ch
            proxy: 'http://ca-proxy-lhcb.cern.ch:3128;http://ca-proxy.cern.ch:3128'
          - mount: na61.cern.ch
          - mount: na62.cern.ch
          - mount: projects.cern.ch
          - mount: sw.hsf.org
      eos:
        deployDaemonSet: *eosDeployDS
        deployCsiDriver: *eosDeployCSI
        useCsiDriver: *eosUseCSI
      spark:
        configurationPath: /cvmfs/sft.cern.ch/lcg/etc/hadoop-confext
swanCern:
  secrets:
    eos:
      cred:
    hadoop:
      cred:
    sparkk8s:
      cred:

hadoopTokenGenerator:
  extraVolumes:
    - name: swan-tokens-scripts
      configMap:
        name: swan-scripts-env-prod
        items:
          - key: hadoop_token.sh
            path: hadoop_token.sh
        defaultMode: 500
fluentd:
  containerRuntime: containerd
  plugins:
    - fluent-plugin-rewrite-tag-filter
    - fluent-plugin-out-http
    - fluent-plugin-grok-parser
  output:
    producer: swan
    endpoint: http://monit-logs.cern.ch:10012/
    includeInternal: false
  parsingConfig: |
    <match kubernetes.**>
        @type rewrite_tag_filter
        capitalize_regex_backreference true
        <rule>
            key $.kubernetes.labels.component
            pattern /^singleuser-server$/
            tag user # user logs + metrics
        </rule>
        <rule>
            key $.kubernetes.labels.component
            pattern /^hub$/
            tag hub # hub logs + metrics
        </rule>
        <rule>
            key $.kubernetes.pod_name
            pattern /.?/
            tag logs 
        </rule>
    </match>

    <match {user,hub}>
        @type rewrite_tag_filter
        capitalize_regex_backreference true
        # jupyter or jupyterhub custom swan metrics
        <rule>
            key $.log
            pattern /^.*?user: .*?, host: .*?, metric: .*?, value: .*$/
            tag metrics
        </rule>
        <rule>
            key $.log
            pattern /.?/
            tag logs
        </rule>
    </match>

    ### SWAN Metrics logs parsing and output ###

    <filter {metrics}>
        @type parser
        key_name log

        reserve_data true
        emit_invalid_record_to_error true

        # grok parsing
        <parse>
            @type grok

            # keep unmatched logs
            grok_failure_key grokfailure

            <grok>
                # messages printed with "metric: metric_key.metric_context", where metric_context can have dots
                pattern user: %{DATA:_metric_user_}, host: %{DATA}, metric: (?<_metric_key_>(\w*))(\.)(?<_metric_context_>(.*)), value: %{GREEDYDATA:_metric_value_}
            </grok>
            <grok>
                # messages printed with "metric: metric_key"
                pattern user: %{DATA:_metric_user_}, host: %{DATA}, metric: (?<_metric_key_>(.*))(?<_metric_context_>(.*)), value: %{GREEDYDATA:_metric_value_}
            </grok>
        </parse>
    </filter>

    <filter {metrics}>
        @type record_transformer
        enable_ruby
        <record>
            metrics.${record['_metric_key_']}.user ${record['_metric_user_']}
            metrics.${record['_metric_key_']}.context ${record['_metric_context_']}
            metrics.${record['_metric_key_']}.value ${record['_metric_value_']}
        </record>
        remove_keys ["_metric_user_", "_metric_key_", "_metric_context_", "_metric_value_"]
    </filter>


    <filter {logs}>
        @type record_transformer
        <record>
            type "logs"
        </record>
    </filter>

    <filter {metrics}>
        @type record_transformer
        <record>
            type "metrics"
        </record>
    </filter>

    <filter {logs,metrics}>
        @type record_transformer
        enable_ruby
        <record>
            timestamp ${(time.to_f * 1000).to_i}
            # define monit producer
            producer "#{ENV['OUTPUT_PRODUCER']}"
            raw ${record["log"]} # field named raw is indexed by MONIT/ES
        </record>
        remove_keys ["log"]
    </filter>

    <match {logs,metrics}>
        @type http
        endpoint_url    "#{ENV['OUTPUT_ENDPOINT']}"
        serializer      json
        http_method     post
    </match>

    ### Common error handling ###

    # rescue errors to fluentd pod stdout for debugging
    <label @ERROR>
        <match **>
            @type stdout
        </match>
    </label>
